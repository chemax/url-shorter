//package interceptors
//
//import (
//	"context"
//	"fmt"
//	"github.com/golang-jwt/jwt/v4"
//
//	"google.golang.org/grpc"
//	"google.golang.org/grpc/metadata"
//)
//
//type claimsStruct struct {
//	jwt.RegisteredClaims
//	UserID string
//}
//type dataBaser interface {
//	CreateUser() (string, error)
//	Use() bool
//}
//
//// JWTInterceptor checks if the jwt token is valid
//func JWTInterceptor(log Loggerer) grpc.UnaryServerInterceptor {
//	log.Debug("jwt interceptor is enabled")
//
//	return func(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (any, error) {
//		var tkn *jwt.Token
//		var userID string
//		claims := &claimsStruct{}
//
//		token, err := jwt.GetFromContextGRPC(ctx)
//		if err != nil {
//			return generateJWT(ctx, log, handler, req)
//		}
//
//		if valid := jwt.TokenValidate(token); !valid {
//			return generateJWT(ctx, log, handler, req)
//		}
//
//		newCTX := context.WithValue(ctx, jwt.ContextKey, token)
//		resp, err := handler(newCTX, req)
//
//		return resp, err
//	}
//}
//
//func generateJWT(
//	ctx context.Context,
//	log Loggerer,
//	handler grpc.UnaryHandler,
//	req any,
//) (any, error) {
//	token, err := jwt.GenerateToken()
//	if err != nil {
//		log.Warn(fmt.Errorf("failed to generate jwt token: %w", err))
//		return handler(ctx, req)
//	}
//
//	newCTX := context.WithValue(ctx, jwt.ContextKey, token)
//	md := metadata.Pairs(jwt.ContextString, token)
//	if err = grpc.SendHeader(newCTX, md); err != nil {
//		log.Warn(fmt.Errorf("failed to send token in header: %w", err))
//	}
//
//	return handler(newCTX, req)
//}
