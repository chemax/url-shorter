// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/handlers.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	http "net/http"
	reflect "reflect"

	models "github.com/chemax/url-shorter/models"
	gomock "github.com/golang/mock/gomock"
)

// Mockconfiger is a mock of configer interface.
type Mockconfiger struct {
	ctrl     *gomock.Controller
	recorder *MockconfigerMockRecorder
}

// MockconfigerMockRecorder is the mock recorder for Mockconfiger.
type MockconfigerMockRecorder struct {
	mock *Mockconfiger
}

// NewMockconfiger creates a new mock instance.
func NewMockconfiger(ctrl *gomock.Controller) *Mockconfiger {
	mock := &Mockconfiger{ctrl: ctrl}
	mock.recorder = &MockconfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconfiger) EXPECT() *MockconfigerMockRecorder {
	return m.recorder
}

// GetHTTPAddr mocks base method.
func (m *Mockconfiger) GetHTTPAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHTTPAddr indicates an expected call of GetHTTPAddr.
func (mr *MockconfigerMockRecorder) GetHTTPAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPAddr", reflect.TypeOf((*Mockconfiger)(nil).GetHTTPAddr))
}

// MockUserser is a mock of Userser interface.
type MockUserser struct {
	ctrl     *gomock.Controller
	recorder *MockUserserMockRecorder
}

// MockUserserMockRecorder is the mock recorder for MockUserser.
type MockUserserMockRecorder struct {
	mock *MockUserser
}

// NewMockUserser creates a new mock instance.
func NewMockUserser(ctrl *gomock.Controller) *MockUserser {
	mock := &MockUserser{ctrl: ctrl}
	mock.recorder = &MockUserserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserser) EXPECT() *MockUserserMockRecorder {
	return m.recorder
}

// Middleware mocks base method.
func (m *MockUserser) Middleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockUserserMockRecorder) Middleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockUserser)(nil).Middleware), next)
}

// Mockloggerer is a mock of loggerer interface.
type Mockloggerer struct {
	ctrl     *gomock.Controller
	recorder *MockloggererMockRecorder
}

// MockloggererMockRecorder is the mock recorder for Mockloggerer.
type MockloggererMockRecorder struct {
	mock *Mockloggerer
}

// NewMockloggerer creates a new mock instance.
func NewMockloggerer(ctrl *gomock.Controller) *Mockloggerer {
	mock := &Mockloggerer{ctrl: ctrl}
	mock.recorder = &MockloggererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockloggerer) EXPECT() *MockloggererMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mockloggerer) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggererMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mockloggerer)(nil).Error), args...)
}

// Errorln mocks base method.
func (m *Mockloggerer) Errorln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorln", varargs...)
}

// Errorln indicates an expected call of Errorln.
func (mr *MockloggererMockRecorder) Errorln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorln", reflect.TypeOf((*Mockloggerer)(nil).Errorln), args...)
}

// Middleware mocks base method.
func (m *Mockloggerer) Middleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockloggererMockRecorder) Middleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*Mockloggerer)(nil).Middleware), next)
}

// Warn mocks base method.
func (m *Mockloggerer) Warn(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockloggererMockRecorder) Warn(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*Mockloggerer)(nil).Warn), args...)
}

// Warnln mocks base method.
func (m *Mockloggerer) Warnln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnln", varargs...)
}

// Warnln indicates an expected call of Warnln.
func (mr *MockloggererMockRecorder) Warnln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnln", reflect.TypeOf((*Mockloggerer)(nil).Warnln), args...)
}

// Mockstorager is a mock of storager interface.
type Mockstorager struct {
	ctrl     *gomock.Controller
	recorder *MockstoragerMockRecorder
}

// MockstoragerMockRecorder is the mock recorder for Mockstorager.
type MockstoragerMockRecorder struct {
	mock *Mockstorager
}

// NewMockstorager creates a new mock instance.
func NewMockstorager(ctrl *gomock.Controller) *Mockstorager {
	mock := &Mockstorager{ctrl: ctrl}
	mock.recorder = &MockstoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorager) EXPECT() *MockstoragerMockRecorder {
	return m.recorder
}

// AddNewURL mocks base method.
func (m *Mockstorager) AddNewURL(parsedURL, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewURL", parsedURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewURL indicates an expected call of AddNewURL.
func (mr *MockstoragerMockRecorder) AddNewURL(parsedURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewURL", reflect.TypeOf((*Mockstorager)(nil).AddNewURL), parsedURL, userID)
}

// BatchSave mocks base method.
func (m *Mockstorager) BatchSave(arr []*models.URLForBatch, httpPrefix string) ([]models.URLForBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSave", arr, httpPrefix)
	ret0, _ := ret[0].([]models.URLForBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSave indicates an expected call of BatchSave.
func (mr *MockstoragerMockRecorder) BatchSave(arr, httpPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*Mockstorager)(nil).BatchSave), arr, httpPrefix)
}

// DeleteListFor mocks base method.
func (m *Mockstorager) DeleteListFor(forDelete []string, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteListFor", forDelete, userID)
}

// DeleteListFor indicates an expected call of DeleteListFor.
func (mr *MockstoragerMockRecorder) DeleteListFor(forDelete, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListFor", reflect.TypeOf((*Mockstorager)(nil).DeleteListFor), forDelete, userID)
}

// GetURL mocks base method.
func (m *Mockstorager) GetURL(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockstoragerMockRecorder) GetURL(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*Mockstorager)(nil).GetURL), code)
}

// GetUserURLs mocks base method.
func (m *Mockstorager) GetUserURLs(userID string) ([]models.URLWithShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", userID)
	ret0, _ := ret[0].([]models.URLWithShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockstoragerMockRecorder) GetUserURLs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*Mockstorager)(nil).GetUserURLs), userID)
}

// Ping mocks base method.
func (m *Mockstorager) Ping() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockstoragerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Mockstorager)(nil).Ping))
}
