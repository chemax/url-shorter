// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	models "github.com/chemax/url-shorter/models"
	gomock "github.com/golang/mock/gomock"
)

// Mockconfiger is a mock of configer interface.
type Mockconfiger struct {
	ctrl     *gomock.Controller
	recorder *MockconfigerMockRecorder
}

// MockconfigerMockRecorder is the mock recorder for Mockconfiger.
type MockconfigerMockRecorder struct {
	mock *Mockconfiger
}

// NewMockconfiger creates a new mock instance.
func NewMockconfiger(ctrl *gomock.Controller) *Mockconfiger {
	mock := &Mockconfiger{ctrl: ctrl}
	mock.recorder = &MockconfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockconfiger) EXPECT() *MockconfigerMockRecorder {
	return m.recorder
}

// GetDBUse mocks base method.
func (m *Mockconfiger) GetDBUse() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBUse")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetDBUse indicates an expected call of GetDBUse.
func (mr *MockconfigerMockRecorder) GetDBUse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBUse", reflect.TypeOf((*Mockconfiger)(nil).GetDBUse))
}

// GetSavePath mocks base method.
func (m *Mockconfiger) GetSavePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSavePath indicates an expected call of GetSavePath.
func (mr *MockconfigerMockRecorder) GetSavePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavePath", reflect.TypeOf((*Mockconfiger)(nil).GetSavePath))
}

// Mockloggerer is a mock of loggerer interface.
type Mockloggerer struct {
	ctrl     *gomock.Controller
	recorder *MockloggererMockRecorder
}

// MockloggererMockRecorder is the mock recorder for Mockloggerer.
type MockloggererMockRecorder struct {
	mock *Mockloggerer
}

// NewMockloggerer creates a new mock instance.
func NewMockloggerer(ctrl *gomock.Controller) *Mockloggerer {
	mock := &Mockloggerer{ctrl: ctrl}
	mock.recorder = &MockloggererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockloggerer) EXPECT() *MockloggererMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *Mockloggerer) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockloggererMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*Mockloggerer)(nil).Debug), args...)
}

// Error mocks base method.
func (m *Mockloggerer) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggererMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mockloggerer)(nil).Error), args...)
}

// MockDataBaser is a mock of DataBaser interface.
type MockDataBaser struct {
	ctrl     *gomock.Controller
	recorder *MockDataBaserMockRecorder
}

// MockDataBaserMockRecorder is the mock recorder for MockDataBaser.
type MockDataBaserMockRecorder struct {
	mock *MockDataBaser
}

// NewMockDataBaser creates a new mock instance.
func NewMockDataBaser(ctrl *gomock.Controller) *MockDataBaser {
	mock := &MockDataBaser{ctrl: ctrl}
	mock.recorder = &MockDataBaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataBaser) EXPECT() *MockDataBaserMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockDataBaser) BatchDelete(arg0 []string, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchDelete", arg0, arg1)
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockDataBaserMockRecorder) BatchDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockDataBaser)(nil).BatchDelete), arg0, arg1)
}

// Get mocks base method.
func (m *MockDataBaser) Get(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDataBaserMockRecorder) Get(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDataBaser)(nil).Get), code)
}

// GetAllURLs mocks base method.
func (m *MockDataBaser) GetAllURLs(userID string) ([]models.URLWithShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURLs", userID)
	ret0, _ := ret[0].([]models.URLWithShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURLs indicates an expected call of GetAllURLs.
func (mr *MockDataBaserMockRecorder) GetAllURLs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURLs", reflect.TypeOf((*MockDataBaser)(nil).GetAllURLs), userID)
}

// GetStats mocks base method.
func (m *MockDataBaser) GetStats() (models.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(models.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockDataBaserMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockDataBaser)(nil).GetStats))
}

// Ping mocks base method.
func (m *MockDataBaser) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDataBaserMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDataBaser)(nil).Ping))
}

// SaveURL mocks base method.
func (m *MockDataBaser) SaveURL(code, URL, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", code, URL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockDataBaserMockRecorder) SaveURL(code, URL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockDataBaser)(nil).SaveURL), code, URL, userID)
}

// Use mocks base method.
func (m *MockDataBaser) Use() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockDataBaserMockRecorder) Use() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockDataBaser)(nil).Use))
}
