// Code generated by MockGen. DO NOT EDIT.
// Source: ./users/users.go

// Package mock_users is a generated GoMock package.
package mock_users

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockConfiger is a mock of Configer interface.
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger.
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance.
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// SecretKey mocks base method.
func (m *MockConfiger) SecretKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecretKey indicates an expected call of SecretKey.
func (mr *MockConfigerMockRecorder) SecretKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretKey", reflect.TypeOf((*MockConfiger)(nil).SecretKey))
}

// TokenExp mocks base method.
func (m *MockConfiger) TokenExp() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenExp")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TokenExp indicates an expected call of TokenExp.
func (mr *MockConfigerMockRecorder) TokenExp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenExp", reflect.TypeOf((*MockConfiger)(nil).TokenExp))
}

// MockLoggerer is a mock of Loggerer interface.
type MockLoggerer struct {
	ctrl     *gomock.Controller
	recorder *MockLoggererMockRecorder
}

// MockLoggererMockRecorder is the mock recorder for MockLoggerer.
type MockLoggererMockRecorder struct {
	mock *MockLoggerer
}

// NewMockLoggerer creates a new mock instance.
func NewMockLoggerer(ctrl *gomock.Controller) *MockLoggerer {
	mock := &MockLoggerer{ctrl: ctrl}
	mock.recorder = &MockLoggererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerer) EXPECT() *MockLoggererMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerer) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggererMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerer)(nil).Debug), args...)
}

// Error mocks base method.
func (m *MockLoggerer) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggererMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerer)(nil).Error), args...)
}

// MockdataBaser is a mock of dataBaser interface.
type MockdataBaser struct {
	ctrl     *gomock.Controller
	recorder *MockdataBaserMockRecorder
}

// MockdataBaserMockRecorder is the mock recorder for MockdataBaser.
type MockdataBaserMockRecorder struct {
	mock *MockdataBaser
}

// NewMockdataBaser creates a new mock instance.
func NewMockdataBaser(ctrl *gomock.Controller) *MockdataBaser {
	mock := &MockdataBaser{ctrl: ctrl}
	mock.recorder = &MockdataBaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdataBaser) EXPECT() *MockdataBaserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockdataBaser) CreateUser() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockdataBaserMockRecorder) CreateUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockdataBaser)(nil).CreateUser))
}

// Use mocks base method.
func (m *MockdataBaser) Use() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockdataBaserMockRecorder) Use() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockdataBaser)(nil).Use))
}
