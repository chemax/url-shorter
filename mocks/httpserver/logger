// Code generated by MockGen. DO NOT EDIT.
// Source: ./httpserver/server.go

// Package mock_httpserver is a generated GoMock package.
package mock_httpserver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoggerer is a mock of Loggerer interface.
type MockLoggerer struct {
	ctrl     *gomock.Controller
	recorder *MockLoggererMockRecorder
}

// MockLoggererMockRecorder is the mock recorder for MockLoggerer.
type MockLoggererMockRecorder struct {
	mock *MockLoggerer
}

// NewMockLoggerer creates a new mock instance.
func NewMockLoggerer(ctrl *gomock.Controller) *MockLoggerer {
	mock := &MockLoggerer{ctrl: ctrl}
	mock.recorder = &MockLoggererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerer) EXPECT() *MockLoggererMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerer) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggererMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerer)(nil).Debug), args...)
}

// Error mocks base method.
func (m *MockLoggerer) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggererMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerer)(nil).Error), args...)
}

// Fatal mocks base method.
func (m *MockLoggerer) Fatal(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggererMockRecorder) Fatal(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerer)(nil).Fatal), args...)
}

// Info mocks base method.
func (m *MockLoggerer) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggererMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerer)(nil).Info), args...)
}
