// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/interfaces.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	http "net/http"
	reflect "reflect"
	time "time"

	util "github.com/chemax/url-shorter/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockDBInterface) BatchDelete(arg0 []string, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BatchDelete", arg0, arg1)
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockDBInterfaceMockRecorder) BatchDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockDBInterface)(nil).BatchDelete), arg0, arg1)
}

// Get mocks base method.
func (m *MockDBInterface) Get(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBInterfaceMockRecorder) Get(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBInterface)(nil).Get), code)
}

// GetAllURLs mocks base method.
func (m *MockDBInterface) GetAllURLs(userID string) ([]util.URLWithShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURLs", userID)
	ret0, _ := ret[0].([]util.URLWithShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURLs indicates an expected call of GetAllURLs.
func (mr *MockDBInterfaceMockRecorder) GetAllURLs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURLs", reflect.TypeOf((*MockDBInterface)(nil).GetAllURLs), userID)
}

// Ping mocks base method.
func (m *MockDBInterface) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBInterface)(nil).Ping))
}

// SaveURL mocks base method.
func (m *MockDBInterface) SaveURL(code, URL, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", code, URL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockDBInterfaceMockRecorder) SaveURL(code, URL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockDBInterface)(nil).SaveURL), code, URL, userID)
}

// Use mocks base method.
func (m *MockDBInterface) Use() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Use")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Use indicates an expected call of Use.
func (mr *MockDBInterfaceMockRecorder) Use() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockDBInterface)(nil).Use))
}

// MockLoggerInterface is a mock of LoggerInterface interface.
type MockLoggerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerInterfaceMockRecorder
}

// MockLoggerInterfaceMockRecorder is the mock recorder for MockLoggerInterface.
type MockLoggerInterfaceMockRecorder struct {
	mock *MockLoggerInterface
}

// NewMockLoggerInterface creates a new mock instance.
func NewMockLoggerInterface(ctrl *gomock.Controller) *MockLoggerInterface {
	mock := &MockLoggerInterface{ctrl: ctrl}
	mock.recorder = &MockLoggerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerInterface) EXPECT() *MockLoggerInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerInterface) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerInterfaceMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerInterface)(nil).Debug), args...)
}

// Debugln mocks base method.
func (m *MockLoggerInterface) Debugln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugln", varargs...)
}

// Debugln indicates an expected call of Debugln.
func (mr *MockLoggerInterfaceMockRecorder) Debugln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugln", reflect.TypeOf((*MockLoggerInterface)(nil).Debugln), args...)
}

// Error mocks base method.
func (m *MockLoggerInterface) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerInterfaceMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerInterface)(nil).Error), args...)
}

// Errorln mocks base method.
func (m *MockLoggerInterface) Errorln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorln", varargs...)
}

// Errorln indicates an expected call of Errorln.
func (mr *MockLoggerInterfaceMockRecorder) Errorln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorln", reflect.TypeOf((*MockLoggerInterface)(nil).Errorln), args...)
}

// Info mocks base method.
func (m *MockLoggerInterface) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerInterfaceMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerInterface)(nil).Info), args...)
}

// Infoln mocks base method.
func (m *MockLoggerInterface) Infoln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infoln", varargs...)
}

// Infoln indicates an expected call of Infoln.
func (mr *MockLoggerInterfaceMockRecorder) Infoln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infoln", reflect.TypeOf((*MockLoggerInterface)(nil).Infoln), args...)
}

// Middleware mocks base method.
func (m *MockLoggerInterface) Middleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockLoggerInterfaceMockRecorder) Middleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockLoggerInterface)(nil).Middleware), next)
}

// Warn mocks base method.
func (m *MockLoggerInterface) Warn(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerInterfaceMockRecorder) Warn(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerInterface)(nil).Warn), args...)
}

// Warnln mocks base method.
func (m *MockLoggerInterface) Warnln(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnln", varargs...)
}

// Warnln indicates an expected call of Warnln.
func (mr *MockLoggerInterfaceMockRecorder) Warnln(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnln", reflect.TypeOf((*MockLoggerInterface)(nil).Warnln), args...)
}

// MockStorageInterface is a mock of StorageInterface interface.
type MockStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInterfaceMockRecorder
}

// MockStorageInterfaceMockRecorder is the mock recorder for MockStorageInterface.
type MockStorageInterfaceMockRecorder struct {
	mock *MockStorageInterface
}

// NewMockStorageInterface creates a new mock instance.
func NewMockStorageInterface(ctrl *gomock.Controller) *MockStorageInterface {
	mock := &MockStorageInterface{ctrl: ctrl}
	mock.recorder = &MockStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInterface) EXPECT() *MockStorageInterfaceMockRecorder {
	return m.recorder
}

// AddNewURL mocks base method.
func (m *MockStorageInterface) AddNewURL(parsedURL, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewURL", parsedURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewURL indicates an expected call of AddNewURL.
func (mr *MockStorageInterfaceMockRecorder) AddNewURL(parsedURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewURL", reflect.TypeOf((*MockStorageInterface)(nil).AddNewURL), parsedURL, userID)
}

// BatchSave mocks base method.
func (m *MockStorageInterface) BatchSave(arr []*util.URLForBatch, httpPrefix string) ([]util.URLForBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchSave", arr, httpPrefix)
	ret0, _ := ret[0].([]util.URLForBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchSave indicates an expected call of BatchSave.
func (mr *MockStorageInterfaceMockRecorder) BatchSave(arr, httpPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*MockStorageInterface)(nil).BatchSave), arr, httpPrefix)
}

// DeleteListFor mocks base method.
func (m *MockStorageInterface) DeleteListFor(forDelete []string, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteListFor", forDelete, userID)
}

// DeleteListFor indicates an expected call of DeleteListFor.
func (mr *MockStorageInterfaceMockRecorder) DeleteListFor(forDelete, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListFor", reflect.TypeOf((*MockStorageInterface)(nil).DeleteListFor), forDelete, userID)
}

// GetURL mocks base method.
func (m *MockStorageInterface) GetURL(code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockStorageInterfaceMockRecorder) GetURL(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockStorageInterface)(nil).GetURL), code)
}

// GetUserURLs mocks base method.
func (m *MockStorageInterface) GetUserURLs(userID string) ([]util.URLWithShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", userID)
	ret0, _ := ret[0].([]util.URLWithShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockStorageInterfaceMockRecorder) GetUserURLs(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockStorageInterface)(nil).GetUserURLs), userID)
}

// Ping mocks base method.
func (m *MockStorageInterface) Ping() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageInterfaceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorageInterface)(nil).Ping))
}

// MockConfigInterface is a mock of ConfigInterface interface.
type MockConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigInterfaceMockRecorder
}

// MockConfigInterfaceMockRecorder is the mock recorder for MockConfigInterface.
type MockConfigInterfaceMockRecorder struct {
	mock *MockConfigInterface
}

// NewMockConfigInterface creates a new mock instance.
func NewMockConfigInterface(ctrl *gomock.Controller) *MockConfigInterface {
	mock := &MockConfigInterface{ctrl: ctrl}
	mock.recorder = &MockConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigInterface) EXPECT() *MockConfigInterfaceMockRecorder {
	return m.recorder
}

// GetDBUse mocks base method.
func (m *MockConfigInterface) GetDBUse() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBUse")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetDBUse indicates an expected call of GetDBUse.
func (mr *MockConfigInterfaceMockRecorder) GetDBUse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBUse", reflect.TypeOf((*MockConfigInterface)(nil).GetDBUse))
}

// GetHTTPAddr mocks base method.
func (m *MockConfigInterface) GetHTTPAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHTTPAddr indicates an expected call of GetHTTPAddr.
func (mr *MockConfigInterfaceMockRecorder) GetHTTPAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPAddr", reflect.TypeOf((*MockConfigInterface)(nil).GetHTTPAddr))
}

// GetNetAddr mocks base method.
func (m *MockConfigInterface) GetNetAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNetAddr indicates an expected call of GetNetAddr.
func (mr *MockConfigInterfaceMockRecorder) GetNetAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetAddr", reflect.TypeOf((*MockConfigInterface)(nil).GetNetAddr))
}

// GetSavePath mocks base method.
func (m *MockConfigInterface) GetSavePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSavePath indicates an expected call of GetSavePath.
func (mr *MockConfigInterfaceMockRecorder) GetSavePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavePath", reflect.TypeOf((*MockConfigInterface)(nil).GetSavePath))
}

// SecretKey mocks base method.
func (m *MockConfigInterface) SecretKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// SecretKey indicates an expected call of SecretKey.
func (mr *MockConfigInterfaceMockRecorder) SecretKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretKey", reflect.TypeOf((*MockConfigInterface)(nil).SecretKey))
}

// TokenExp mocks base method.
func (m *MockConfigInterface) TokenExp() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenExp")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TokenExp indicates an expected call of TokenExp.
func (mr *MockConfigInterfaceMockRecorder) TokenExp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenExp", reflect.TypeOf((*MockConfigInterface)(nil).TokenExp))
}

// MockUsersInterface is a mock of UsersInterface interface.
type MockUsersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsersInterfaceMockRecorder
}

// MockUsersInterfaceMockRecorder is the mock recorder for MockUsersInterface.
type MockUsersInterfaceMockRecorder struct {
	mock *MockUsersInterface
}

// NewMockUsersInterface creates a new mock instance.
func NewMockUsersInterface(ctrl *gomock.Controller) *MockUsersInterface {
	mock := &MockUsersInterface{ctrl: ctrl}
	mock.recorder = &MockUsersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersInterface) EXPECT() *MockUsersInterfaceMockRecorder {
	return m.recorder
}

// Middleware mocks base method.
func (m *MockUsersInterface) Middleware(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middleware", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Middleware indicates an expected call of Middleware.
func (mr *MockUsersInterfaceMockRecorder) Middleware(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middleware", reflect.TypeOf((*MockUsersInterface)(nil).Middleware), next)
}
